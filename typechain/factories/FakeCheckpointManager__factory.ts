/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FakeCheckpointManager,
  FakeCheckpointManagerInterface,
} from "../FakeCheckpointManager";

const _abi = [
  {
    inputs: [],
    name: "currentCheckpointNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "headerBlocks",
    outputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "rootHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "setCheckpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b5061045e806100256000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806341539d4a146100465780634d5505d31461007a578063afa764d714610098575b600080fd5b610060600480360381019061005b919061026b565b6100b4565b6040516100719594939291906102c1565b60405180910390f35b61008261010a565b60405161008f9190610314565b60405180910390f35b6100b260048036038101906100ad919061021c565b610110565b005b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b60015481565b60006040518060a001604052808581526020018481526020018381526020014281526020013373ffffffffffffffffffffffffffffffffffffffff1681525090506001805461015f919061032f565b6001819055508060008060015481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050505050565b600081359050610201816103fa565b92915050565b60008135905061021681610411565b92915050565b60008060006060848603121561023157600080fd5b600061023f868287016101f2565b935050602061025086828701610207565b925050604061026186828701610207565b9150509250925092565b60006020828403121561027d57600080fd5b600061028b84828501610207565b91505092915050565b61029d81610385565b82525050565b6102ac81610397565b82525050565b6102bb816103c1565b82525050565b600060a0820190506102d660008301886102a3565b6102e360208301876102b2565b6102f060408301866102b2565b6102fd60608301856102b2565b61030a6080830184610294565b9695505050505050565b600060208201905061032960008301846102b2565b92915050565b600061033a826103c1565b9150610345836103c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561037a576103796103cb565b5b828201905092915050565b6000610390826103a1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61040381610397565b811461040e57600080fd5b50565b61041a816103c1565b811461042557600080fd5b5056fea26469706673582212200773713aa4790415ad1d4c768a8c2dfa3499a71b25a4260f5cc01c7490d545af64736f6c63430008040033";

export class FakeCheckpointManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FakeCheckpointManager> {
    return super.deploy(overrides || {}) as Promise<FakeCheckpointManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FakeCheckpointManager {
    return super.attach(address) as FakeCheckpointManager;
  }
  connect(signer: Signer): FakeCheckpointManager__factory {
    return super.connect(signer) as FakeCheckpointManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeCheckpointManagerInterface {
    return new utils.Interface(_abi) as FakeCheckpointManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeCheckpointManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FakeCheckpointManager;
  }
}
